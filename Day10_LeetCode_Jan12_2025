class Solution {
    public boolean canBeValid(String s, String locked) {
        if (s.length()%2 == 1) {
            return false;
        }
        char arr[] = new char[s.length()];
        for (int i = 0; i < arr.length; i++) {
            if (locked.charAt(i) == '0') {
                arr[i] = '*';
            } else {
                arr[i] = s.charAt(i);
            }
        }
        Stack<Integer> star = new Stack<>();
        Stack<Integer> open = new Stack<>();
        for (int i = 0; i < arr.length; i++) {
            char ch = arr[i];
            if (ch == '*') {
                star.push(i);
            } else if (ch == '(') {
                open.push(i);
            } 
            else if (ch == ')') {
            if (! open.isEmpty()) {
               open.pop();
            } else if (! star.isEmpty()) {
                star.pop();
            } else {
                return false;
            }
            }
        }
       while (! open.isEmpty() && ! star.isEmpty() && open.peek() < star.peek()) {
        open.pop();
        star.pop();
       }
       if (! open.isEmpty()) {
        return false;
       }
        return true;
    }
}
